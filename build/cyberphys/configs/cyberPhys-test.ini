# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is the configuration file for cyberPhys
# User Help:
# If you want to create your own file, please enable `useCustomCyberPhysConfig` and enter the path in
# `pathToCustomCyberPhysConfig` in the fett config file. Note that `myCyberPhys.ini` is git ignored ;)
# Please fill-in the options as needed then run ./fett.py
# Keep the comments on seperate lines from values. Order of parameters does not matter, but section headers are required.
# Parameters names are case sensitive.
# For bool types, you can use 0/1, False/True, Yes/No [Case insensitive].
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# The DEFAULT section overwrites the other sections ONLY if the option is not explicitly defined in the other targets.
# If `nTargets == N` (fett config), then there has to be sections `target1` --> `targetN`.
[DEFAULT]
binarySource = GFE
# [ GFE | LMCO | Michigan | MIT | SRI-Cambridge ]
sourceVariant = default
# [ default | purecap | temporal ]. purecap and temporal are only compatible with SRI-Cambridge.
target = vcu118
# [ qemu | vcu118 | awsf1 ]
processor = bluespec_p2
# [bluespec_p1, chisel_p1, bluespec_p2, chisel_p2, bluespec_p3, chisel_p3]
osImage = debian
# [ debian | FreeRTOS | FreeBSD | busybox(limited) ]
freertosFatFs = default
# Only applicable in 'test' mode and if 'buildApps' is enabled
# [ default (ramdisk for vcu118 and dosblk for awsf1) | ramdisk | dosblk (only on awsf1) | sdcard (only on vcu118) ]
elfLoader = netboot
# [ JTAG | netboot ]
useCustomOsImage = No
# Source of the OS image: If 'No', Nix/FETT-Binaries will be used.
pathToCustomOsImage = /path/to/image
# Path to the osImage in case 'useCustomOsImage' is set to Yes.
useCustomProcessor = No
# Source of the processor files: If 'No', Nix/FETT-Binaries will be used.
pathToCustomProcessorSource = /path/to/source/directory
# Path to a directory with all the files needed (following the structure of FETT-Binaries) to use the custom processor in case 'useCustomProcessor' is set to Yes.
#--------------------------------------------------------------------------------
# hostIP = 10.88.88.1
# P2
# Infotainment server
# OTA update server
#
# ECU
# CAN library
#
#--------------------------------------------------------------------------------
[target1]
# label = "Baseline Infotainment 1"
# osImage = debian
# targetIP = 10.88.88.2
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[target2]
# label = "Baseline Infotainment 2"
# osImage = FreeBSD
# targetIP = 10.88.88.3
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[target3]
# label = "Secure Infotainment"
# targetIP = 10.88.88.4
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[target4]
# label = "Baseline ECU 1"
# targetIP = 10.88.88.5
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[target5]
# label = "Baseline ECU 2"
# targetIP = 10.88.88.6
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[target6]
# label = "Secure ECU"
# targetIP = 10.88.88.7
#--------------------------------------------------------------------------------
